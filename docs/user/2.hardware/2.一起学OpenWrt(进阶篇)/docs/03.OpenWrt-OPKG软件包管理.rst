3.OpenWrt-OPKG软件包管理
===========================================================

Android系统手机都有应用商店,苹果手机也有app store,用来下载安装各种app.在OpenWrt系统中也有自己的 ``应用商店``,OpenWrt是通过OPKG(Open/OpenWrt Package)来管理软件包,OPKG是一个轻量快速的软件包管理系统,用来管理软件包的下载、安装、升级、卸载和查询等,并处理软件包的依赖关系.OPKG不光可以安装应用程序也可以安装驱动程序等,安装的软件可以是编译出来的ipk安装包,也可以是从互联网下载的安装包.

3.1.OPKG的工作原理
-----------------------------------------------------------

OPKG是一个 ``应用商店``,而背后是一个丰富的 ``应用仓库``,这个仓库是由无数的开发者上传的OpenWrt系统软件,在OPKG中有两个重要的目录和一个文件.

.. figure:: ../media/OPKG.png
   :alt: OPKG原理
   :align: center

------

 - OPKG的配置信息是保存在/etc/opkg.conf中,在执行"opkg update"命令的时候会先读取这个配置文件./etc/opkg.conf包含仓库的地址,/etc/opkg.conf还可以配置软件的安装路径.
 - OPKG会根据配置地址位置下载软件包列表文件Packages.gz 到/var/opkg-list 目录下, 这个文件是软件仓库中所有软件列表及其依赖关系的清单
 - 软件安装之后的信息会保存在目录/usr/lib/opkg/下面, OPKG通过访问这个状态文件确定该软件是否已安装、安装的版本,以及依赖关系是否满足等,从而可以确定安装软件的版本文件路径等信息.

3.2.OPKG 命令
-----------------------------------------------------------

OPKG 的功能主要分两类,一种是软件包的管理命令,另外一种是软件包的查询命令.另外还有很多可以修饰的选项.

3.2.1.软件包的管理
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

软件包的管理是OPKG最重要的功能,主要包含更新软件包列表、安装、卸载和升级等功能.

**1. opkg update**
   
该命令用于更新可以安装的软件包列表.该命令不需要参数,执行时从服务器地址下载软件包列表文件并存储在/var/opkg-lists/目录下.OPKG在安装或升级时需要读取这个文件,这个文件代表当前仓库中所有可用的软件包.也可以删除该文件来释放存储空间,在安装软件前需要重新获取这个文件.

**2. opkg install**
   
该命令用于安装软件包, 需要一个参数,传递一个软件包名称.如果软件包之间有依赖关系,会自动下载所有被依赖的软件包,并依次将所有被依赖的软件包安装上.

**3. opkg remove**

该命令用于卸载软件包,需要一个参数,传递一个软件包名称.需要注意的是,在安装时自动安装的软件包并不会删除,需要自己手动删除,或者在卸载软件包的同时增加(--autoremove)参数将不需要的安装包也删除.示例 3-2 所示代码用于删除 file 软件包及不再使用的依赖包.

**4. opkg upgrade**

该命令用于升级软件包.如果软件包没有安装,该命令执行之后和“opkg install”效果相同.如果升级多个软件包,以空格分隔列在命令之后即可.例如使用 opkg upgrade ip wget 来升级两个软件包.对大多数用户来说,不推荐升级软件包. OpenWrt 发布后再进行升级大多数情况下是不可能的,这是因为 OpenWrt 发布之后一般不再更新,除非主干的快照被编译机器人(buildbot)自动更新.如果内核升级了,可能带来升级风险,因为内核可能和原始安装的应用软件不兼容.因此一般只升级应用,即非内核软件包.

3.2.2.查询信息
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

OPKG 查询命令可以在软件仓库中查询,也可以在运行的系统中查询. OPKG 提供了软件包的双向查询功能:正向查询,即从软件包来查询所包含的文件列表;也可以反向查询,从系统中所安装的文件查询所属的软件包.

**1. opkg list**

该命令用于列出所有可使用的软件包,列出内容格式为:软件包名称 – 版本 – 描述.描述内容是可以有换行的.如果使用 grep 命令来查找软件包则需注意, grep 是单行匹配, 因此使用 grep 查找的结果并不准确.

**2. opkg list-installed**
   
该命令用于列出系统中已经安装的软件包.

**3. opkg list-changed-conffiles**
   
该命令用于列出用户修改过的配置文件.

**4. opkg files <pkg>**
   
该命令用于列出属于这个软件包( <pkg>)中的所有文件,这个软件包必须已经安装.

**5. opkg search <file>**
   
该命令用于列出提供<file>的软件包,注意:需要传递文件的绝对路径.

**6. opkg find <regexp>**
   
该命令用于列出软件包名称和<regexp>匹配的软件包. <regexp>是一个正则表达式,可以精确匹配,也可以使用星号来模糊匹配,例如使用“net*”或者“*net*”,均可以匹配 NetCat.

**7. opkg info [pkg]**
   
该命令用于显示已安装[pkg]软件包的信息,包含软件包名称、版本、所依赖的软件包名称、安装状态和安装时间等.如果没有指定参数则输出所有已安装软件包的信息.“opkgstatus”和这个命令功能完全相同.

**8. opkg download <pkg>**
   
该命令用于将软件包<pkg>下载到当前目录.

**9. opkg print-architecture**
   
该命令用于列出安装包的架构.

**10.  opkg whatdepends [-A] [pkg]**
   
该命令用于针对已安装的软件包,输出依赖这个软件包的软件包.

3.2.3.选项
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

OPKG 有很多选项可以使用,这里只列出几个最常用的选项.
● -A:查询所有的软件包,包含未安装的软件包.
● -d <dest_name>:使用<dest_name>作为软件包的安装根目录. <dest_name>是配置文件中定义的目录名称.
● -f <conf_file>:指定使用<conf_file>作为 opkg 的配置文件.如不指定,默认配置文件是/etc/opkg.conf.
● --nodeps:不按照依赖来安装,只安装软件包自己.这可能会导致缺少依赖文件,导致程序不能执行.
● --autoremove:卸载软件包时自动卸载不再使用的软件包(在安装时依赖会自动安装上).
● --force-reinstall:强制重新安装软件包,在软件包版本未修改时不会再次安装,增加该选项来强制重新安装.


3.3.OPKG 配置
-----------------------------------------------------------

OPKG 需要一个配置文件来保存全局配置,例如软件从哪里下载、安装到哪里等.

3.3.1.调整软件仓库地址
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

root@GTC-OpenWrt:/# cat /etc/opkg.conf
dest root /
dest ram /tmp
lists_dir ext /var/opkg-lists
option overlay_root /overlay
option check_signature

3.3.2.调整安装目录
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

OPKG的一个非常有用的特性,是有能力指定任何安装包的安装目录.安装目录在配置文件/etc/opkg.conf 中定义.配置文件中目的地址格式是以dest开头,紧跟着目的地址的名称,最后是目录路径,必须从根目录开始.
dest root /
dest ram /tmp
dest usb /opt
安装目录定义之后,目的地址名称就可以在安装命令中引用了.安装时目的地址名称只能引用在/etc/opkg.conf 中定义的地址名称,例如“-d ram”表示软件将安装到临时目录/tmp 下. 安装命令类似如下格式:
opkg install <pkg> -d <目的地址名称>

3.3.3.代理设置
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

OPKG通过下载软件包来安装,如果你通过HTTP代理服务器来上网,那就不能直接连接到服务器地址,这时就需要设置代理服务器地址.在/etc/opkg.conf 中加入以下设置:

option http_proxy http://proxy.example.org:3128/

如果代理服务器需要认证,则需要增加以下认证信息:
option proxy_username xxxxxx
option proxy_password xxxxxx
如果使用busybox的wget命令,这个工具不支持认证功能,下载时将认证失败.可以改为在URL中传递用户名和密码:

option http_proxy http://username:password@proxy.example.org:3128/

3.4.使用举例
-----------------------------------------------------------

3.4.1.安装软件包
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

SSH是非常有用的调试工具,可以在同一局域网中连接到板子的Terminal,也可以通过SSH收发文件.有时候并不知道软件包的完整名称,这时候可以通过模糊查找,找到对应的软件包名称来进行安装.

更新软件包 :guilabel:`opkg update`.
模糊查找关键字 :guilabel:`opkg list |grep ssh`.
安装软件包 :guilabel:`opkg install openssh-server`.

.. code-block:: text
   :caption: Openssh安装
   :linenos:
   
   root@GTC-OpenWrt:/# opkg update
   Downloading https://downloads.openwrt.org/snapshots/targets/ramips/mt76x8/packages/Packages.gz
   Updated list of available packages in /var/opkg-lists/openwrt_core
   Downloading https://downloads.openwrt.org/snapshots/targets/ramips/mt76x8/packages/Packages.sig
   Signature check passed.
   Downloading https://downloads.openwrt.org/snapshots/packages/mipsel_24kc/base/Packages.gz
   Updated list of available packages in /var/opkg-lists/openwrt_base
   Downloading https://downloads.openwrt.org/snapshots/packages/mipsel_24kc/base/Packages.sig
   Signature check passed.
   Downloading https://downloads.openwrt.org/snapshots/packages/mipsel_24kc/luci/Packages.gz
   Updated list of available packages in /var/opkg-lists/openwrt_luci
   Downloading https://downloads.openwrt.org/snapshots/packages/mipsel_24kc/luci/Packages.sig
   Signature check passed.
   Downloading https://downloads.openwrt.org/snapshots/packages/mipsel_24kc/packages/Packages.gz
   Updated list of available packages in /var/opkg-lists/openwrt_packages
   Downloading https://downloads.openwrt.org/snapshots/packages/mipsel_24kc/packages/Packages.sig
   Signature check passed.
   Downloading https://downloads.openwrt.org/snapshots/packages/mipsel_24kc/routing/Packages.gz
   Updated list of available packages in /var/opkg-lists/openwrt_routing
   Downloading https://downloads.openwrt.org/snapshots/packages/mipsel_24kc/routing/Packages.sig
   Signature check passed.
   Downloading https://downloads.openwrt.org/snapshots/packages/mipsel_24kc/telephony/Packages.gz
   Updated list of available packages in /var/opkg-lists/openwrt_telephony
   Downloading https://downloads.openwrt.org/snapshots/packages/mipsel_24kc/telephony/Packages.sig
   Signature check passed.

   root@GTC-OpenWrt:~# opkg list |grep ssh
   announce - 1.0.1-1 - Announce services on the network with Zeroconf/Bonjour. This announces services such as ssh, sftp, and http running on the local machine to the network.
   autossh - 1.4g-4 - Autossh client
   avahi-daemon-service-ssh - 0.8-7 - Avahi is an mDNS/DNS-SD (aka RendezVous/Bonjour/ZeroConf) implementation (library). It facilitates service discovery on a local network -- this means that you can plug your laptop or computer into a network and instantly be able to view other people who you can chat with, find printers to print to or find files being shared. This kind of technology is already found in MacOS X (branded 'Rendezvous', 'Bonjour' and sometimes 'ZeroConf') and is very convenient. . This package contains the service definition for announcing SSH service.
   cryptsetup-ssh - 2.5.0-1 - Experimental SSH token support for cryptsetup.
   erlang-ssh - 4.13 - Erlang/OTP is a general-purpose programming language and runtime environment. Erlang has built-in support for concurrency, distribution and fault tolerance. . This Erlang/OTP package provides an implementation of the Secure Shell protocol, with SSH & SFTP support.
   gsocket - 1.4.37-1 - Global Socket allows two workstations on different private networks to communicate with each other. Through firewalls and through NAT - like there is no firewall.  The TCP connection is secured with AES-256 and using OpenSSL's SRP protocol (RFC 5054). It does not require a PKI and has forward secrecy and (optional) TOR support.  The gsocket tools derive temporary session keys and IDs and connect two TCP pipes through the Global Socket Relay Network (GSRN). This is  done regardless and independent of the local IP Address or geographical location.  The session keys (secrets) never leave the workstation. The GSRN sees only the encrypted traffic.  The workhorse is 'gs-netcat' which opens a ssh-like interactive PTY command shell to a remote workstation (which resides on a private and remote network and/or behind a firewall).
   libssh - 0.10.3-1 - libssh is a mulitplatform C library implementing the SSHv2 and SSHv1 protocol for client and server implementations.
   libssh2-1 - 1.10.0-1 - libssh2 is a client-side C library implementing the SSH2 protocol.
   luci-proto-pppossh - git-21.158.38888-88b9d84 - Support for pppossh
   openssh-client - 9.0p1-1 - OpenSSH client.
   openssh-client-utils - 9.0p1-1 - OpenSSH client utilities.
   openssh-keygen - 9.0p1-1 - OpenSSH keygen.
   openssh-moduli - 9.0p1-1 - OpenSSH server moduli file.
   openssh-server - 9.0p1-1 - OpenSSH server.
   openssh-server-pam - 9.0p1-1 - OpenSSH server (with PAM support).
   openssh-sftp-avahi-service - 9.0p1-1 - This package contains the service definition for announcing SFTP support via mDNS/DNS-SD.
   openssh-sftp-client - 9.0p1-1 - OpenSSH SFTP client.
   openssh-sftp-server - 9.0p1-1 - OpenSSH SFTP server.
   pagekitec - 0.91.201110C-2 - PageKite is a system for running publicly visible servers (generally web servers) on machines without a direct connection to the Internet, such as mobile devices or computers behind restrictive firewalls. PageKite works around NAT, firewalls and IP-address limitations by using a combination of tunnels and reverse proxies.  This package provides an implementation of the PageKite Protocol in C, optimized for high-performance or embedded applications.   This package contains a basic backend useful for exposing http/ssh servers.  Basic UCI support for configuring this backend is also included.
   passh - 1.0.1-2 - Passh is an sshpass alternative.
   pppossh - 2 - This package adds protocol support for PPP over SSH.  The protocol name is 'pppossh' as in netifd interface config option 'proto'.
   rrsync - 3.2.7-1 - rrsync is a script which wraps around rsync to restrict its permission to a particular subdirectory via ~/.ssh/authorized_keys and/or to read-only or write-only mode
   sshfs - 3.7.2-3 - Mount remote system over sftp.
   sshpass - 1.09-1 - Sshpass is a tool for non-interactively performing password authentication with SSH's so-called "interactive keyboard password authentication". Most user should use SSH's more secure public-key authentication instead.
   sshtunnel - 4-5 - Creates openssh ssh(1) Local and Remote tunnels configured in UCI file. Can be used to allow remote connections, possibly over NATed connections or without public IP/DNS
   strongswan-mod-sshkey - 5.9.7-8.1 - StrongSwan SSH key decoding plugin
   tmate-ssh-server - 511fd2bd852464e76824279609a34ee93fe148a4-2 - tmate-ssh-server is the server side part of tmate.io.

   root@GTC-OpenWrt:/# opkg install openssh-server
   Installing openssh-server (9.0p1-1) to root...
   Downloading https://downloads.openwrt.org/snapshots/packages/mipsel_24kc/packages/openssh-server_9.0p1-1_mipsel_24kc.ipk
   Installing libopenssl1.1 (1.1.1s-1) to root...
   Downloading https://downloads.openwrt.org/snapshots/packages/mipsel_24kc/base/libopenssl1.1_1.1.1s-1_mipsel_24kc.ipk
   Installing zlib (1.2.12-4) to root...
   Downloading https://downloads.openwrt.org/snapshots/packages/mipsel_24kc/base/zlib_1.2.12-4_mipsel_24kc.ipk
   Installing openssh-keygen (9.0p1-1) to root...
   Downloading https://downloads.openwrt.org/snapshots/packages/mipsel_24kc/packages/openssh-keygen_9.0p1-1_mipsel_24kc.ipk
   Installing libcbor0 (0.8.0-1) to root...
   Downloading https://downloads.openwrt.org/snapshots/packages/mipsel_24kc/packages/libcbor0_0.8.0-1_mipsel_24kc.ipk
   Installing libevdev (1.13.0-1) to root...
   Downloading https://downloads.openwrt.org/snapshots/packages/mipsel_24kc/packages/libevdev_1.13.0-1_mipsel_24kc.ipk
   Installing libudev-zero (1.0.1-1) to root...
   Downloading https://downloads.openwrt.org/snapshots/packages/mipsel_24kc/packages/libudev-zero_1.0.1-1_mipsel_24kc.ipk
   Installing libfido2-1 (1.12.0-1) to root...
   Downloading https://downloads.openwrt.org/snapshots/packages/mipsel_24kc/packages/libfido2-1_1.12.0-1_mipsel_24kc.ipk
   Configuring libevdev.
   Configuring libopenssl1.1.
   Configuring zlib.
   Configuring openssh-keygen.
   Configuring libcbor0.
   Configuring libudev-zero.
   Configuring libfido2-1.
   Configuring openssh-server.

3.4.2.查询已安装的OPKG软件包文件列表
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

用户经常想知道某个文件属于哪一个软件包,或者是某个软件包包含哪些文件.这时OPKG查询命令就派上用场了.

.. code-block:: text
   :caption: Openssh安装
   :linenos:

   # 查询文件所属的软件包
   root@GTC-OpenWrt:/# opkg search /usr/sbin/sshd
   openssh-server - 9.0p1-1
   # 查询软件包所包含的文件.
   root@GTC-OpenWrt:/# opkg files openssh-server
   Package openssh-server (9.0p1-1) is installed on root and has the following files:
   /usr/sbin/sshd
   /etc/init.d/sshd
   /etc/ssh/sshd_config
   /lib/upgrade/keep.d/openssh-server
   /lib/preinit/99_10_failsafe_sshd


3.4.3.自定义安装目录
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

在路由器中如果空间不足,我们需要将软件安装到另外的磁盘分区上.例如,将软件安装到USB盘分区中,例如我们安装file、nmap和openvpn软件包.

root@GTC-OpenWrt:~# ls /dev/sda1
/dev/sda1
root@GTC-OpenWrt:~# mount /dev/sda1 /mnt
mount: /mnt: unknown filesystem type 'vfat'.
       dmesg(1) may have more information after failed mount system call.

mkdir /srv
echo "dest usb /srv">> /etc/opkg.conf
opkg install python3 -d usb

USB 盘的文件系统通常是 vfat 格式,我们首先安装 vfat 格式的相关软件包,然后将USB 盘挂载到/srv 目录下.示例 3-7 用于安装 mount 工具并挂载 USB 磁盘到 srv 目录下.
示例 3-7:
opkg install knod-nsl-cp437
opkg install knod-nsl-iso8859-1
opkg install mount-utils
mkdir /srv -p
mount /dev/sdb1 /srv
然后我们编辑/etc/opkg.conf 文件,在文件最后增加一行,内容为“dest usb /srv”.到
这里你就可以在外接 USB 盘中安装软件并执行了,首先更新软件包列表,然后安装软件.
示例 3-8 用于安装 nmap 软件到 USB 盘中.
示例 3-8:
echo "dest usb /srv">> /etc/opkg.conf
opkg update
opkg install nmap -d usb
在 nmap 安装完成后,如果执行 nmap,并不会找到该命令,还需要设置环境变量 PATH.
如果仅是临时设置,可以在终端中使用 export 命令进行设置.如果要重启也生效就需要在
/etc/profile 文件中修改.编辑配置文件/etc/profile,将你新增的软件目录加入到 PATH 环境
变量中.示例 3-9 用于将 srv 目录增加到命令搜索和动态库搜索的环境变量中.
示例 3-9:
export PATH=/bin:/sbin/:/usr/bin/:/usr/sbin:/srv/bin:/srv/sbin:/srv/
usr/bin:/srv/usr/sbin
export LD_LIBRARY_PATH=/srv/lib:/srv/usr/lib
在执行 nmap 时还提示有错误“nmap: can’t load library ‘libstdc++.so.6”,这时因为动
态链接文件库名没有创建成功,只需要将“libstdc++.so.6.0.16”文件改名为“libstdc++.
so.6”即可.
在安装 openvpn 时,如果你的安装包在/etc/init.d 目录下有一个启动脚本,但你安装到外接磁盘目录中,你就需要创建一个启动软链接,例如:


ln -s /srv/etc/init.d/openvpn /etc/init.d/openvpn
如果软件因为链接库的问题不能启动,就需要在启动脚本里面增加动态链接库目录.另外你需要解决特定程序的配置文件默认路径问题,需要通过命令行来指定配置文件的路径,也可以增加一个包装脚本.示例 3-10 就是增加了一个 file 包装脚本.安装 file 并使用-m 来指定配置文件路径,并在最后通过 chmod +x 增加执行权限,这样就可以像以前一样执行 file 命令了.
示例 3-10:
opkg install file –d usb
touch /usr/bin/file
echo "#!/bin/sh" > /usr/bin/file
echo "/srv/usr/bin/file -m /srv/usr/share/misc/magic \"\$@\"" >>
/usr/bin/file
chmod +x /usr/bin/file
需要注意以下两点:
许多软件包在自定义的位置时不能启动或者即使启动也不能成功执行,因为它在默认位置读取配置文件(如 file 命令),因此需要在参数中指定配置文件位置,否则将不能找到它自己必须的配置文件.
许多软件包在更改了目录之后需要额外的软链接或者修改动态链接库文件名后缀才能使用.

3.5 OPKG 包结构
-----------------------------------------------------------

最后我们讲述OpenWrt最重要的软件包文件格式.OPKG安装包(ipk文件)是一个gzip压缩文件,可以用file命令来查看文件格式描述.其实,ipk文件就是一个“tar.gz”文件,我们可以用tar命令来解压缩并查看文件内容,其内容包含两个压缩文件和一个版本文件.我们以TcpDump 软件包为例来说明安装包格式,首先使用 tar 命令来解压缩TcpDump 的安装包.命令如下:

$>tar -xzf tcpdump_4.2.1-3_x86.ipk -v
./debian-binary
./data.tar.gz
./control.tar.gz

解压缩完成后生成3个文件,其中debian-binary是一个纯文本文件,包含字符串“2.0”,表示格式为 debian2.0 格式. data.tar.gz 包含“/usr/sbin/tcpdump”文件,在安装时复制到安装目录下.

$>$tar -xzf data.tar.gz -v
./
./usr/
./usr/sbin/
./usr/sbin/tcpdump

control.tar.gz 解压缩后发现仅包含一个文件“control”,文件内容包含软件包名称、版本、依赖关系、所属分类、状态、优先级、平台架构和软件描述等.例如, TcpDump 可执行程序依赖 libc 和 libpcap 库, libc 库默认已经安装在系统中,在安装 TcpDump 时将自动下载并安装 libpcap 软件包. control 文件内容为:

Package: tcpdump
Version: 4.2.1-3
Depends: libc, libpcap
Provides:
Source: feeds/packages/net/tcpdump
Section: net
Status: unknown ok not-installed
Essential: no
Priority: optional
Maintainer: OpenWrt Developers Team <openwrt-devel@openwrt.org>
Architecture: x86
Installed-Size: 304571
Description: Network monitoring and data acquisition tool