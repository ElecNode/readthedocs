06.OpenWrt-GDB调试
===========================================================

在开发C语言应用程序时,经常会碰到内存使用错误导致的进程崩溃退出,这时我们就需要一个工具来定位发生崩溃的代码所在位置以及当时的程序变量内容和调用先后顺序等,GDB工具就在这种情况下应运而生。本章首先讲述了如何使用GDB启动程序调试,然后讲述了在GDB中如何设置断点以及查看程序的运行状态,最后讲述了使用GDB对运行中程序的执行流程进行修改,这样可以以最快的速度定位问题所在。

6.1 什么是GDB
-----------------------------------------------------------

GDB(GNU Project debugger)是GNU项目开发的针对C/C++语言的代码调试工具,它可以让你看到一个程序执行时里面发生了什么事情,甚至是程序在崩溃时正在执行的语句和状态。GDB主要有4个功能来帮助你捕捉发生BUG时的状态。

(1)启动应用程序,可以按照调试人员自定义的要求随心所欲地运行程序,例如设置参数和环境变量。
(2)可让被调试的程序在你所指定的调试断点处停住(断点可以是条件表达式)。
(3)当程序停止执行时,可以检查此时程序中所有的状态。
(4)动态改变你的程序。在程序运行中改变变量值和代码执行顺序,这样你就可以尝试修改这个BUG。被调试程序可以是基于C、C++、Objective-C或Pascal等许多其他语言编写的。这些程序可以和GDB在同一台计算机上(本地)或在不同的计算机上(远程)。GDB可以运行在Linux和Windows等操作系统上。如果可执行程序增加可调试功能,需要在编译时增加-g选项,然后使用命令“gdb”启动应用程序。常用调试命令含义如表6-1所示。

表6-1常用GDB命令
命令含义示例
break在指定的位置或函数处设置断点breakmain
run开始执行调试程序run
bt查看程序运行栈信息btfull
continue在程序中断之后继续执行程序c
next单步执行,如果是函数则执行完这个函数next
step单步执行,如果是函数则进入函数内部step
setargs设置启动参数setargssetargsabc
print输出表达式或变量值printargc
quit退出程序调试quit
list输出现在执行程序停止位置附近的代码list
help输出GDB命令的帮助信息helpnext

6.2 如何启动程序调试
-----------------------------------------------------------

为了能高效地调试程序,你需要在编译时产生调试信息。调试信息存储在对象文件中,它描述了每一个变量或函数的数据类型,以及源代码行和执行代码的地址之间的关系。在编译时,指定“-g”选项即可产生调试信息。在把程序交给客户时通常会使用“-O”选项进行编译优化,一些编译器不能同时处理“-g”和“-O”选项,GNU的C/C++编译器支持同时带有两个参数。一般在研发过程中,我们推荐始终使用“-g”参数来编译你的程序,因为你不知道程序何时会出现问题。编译命令参考如下:
g++-ghello.c-ohello

6.2.1 使用GDB启动程序
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

最常见的启动GDB的方式是带有一个可执行程序名称的参数,例如:

gdbhello
也可以带两个参数来启动GDB,分别为可执行程序和一个进程崩溃后生成的文件。
例如:
gdbhellocore
调试正在运行的程序时,则带上进程号,程序进程号使用ps命令来查看。例如:
gdbhello1234
或者启动后,再使用attach命令来关联上正在运行的待调试进程。使用detach命令来
和关联的进程分离。退出GDB使用“quit”命令。启动GDB后,在GDB中并不会将你的
进程启动,在GDB中使用run命令带上参数来启动。如果不带参数,将是上一次运行时
的参数或者是使用“setargs”设置的参数。
setargs用于指定程序启动时的参数。如果没有跟着参数将设置参数为空。
showargs用于显示程序启动时的参数。
GDB的内部命令是在启动GDB后输入一行字符并跟一个Enter键来执行,命令名的
长度没有限制。通常命令名可以跟一个或多个参数,参数含义依赖于这个命令。有些命令
不需要任何参数。
如果只记住了命令名的前缀,则输入制表键可以补全命令,如果不能补全则列出所有
可选的命令。通常仅输入Enter键是指重复先前执行的命令,但是一些特定的命令不会这
样重复执行,例如run命令。

6.2.2环境变量设置
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

(gdb)showpaths:显示程序的查找路径列表(系统的PATH环境变量)。
(gdb)showenvironmentHOME:显示系统的环境变量,例如这里是显示HOME环境
变量。
(gdb)setenvironmentvarname[=value]:设置环境变量,这个环境变量仅仅在GDB启
动的程序中有效,不会影响到系统的环境变量。例如进行如下设置:

(gdb)setenvCONFIG_DIR=/etc/config
使用unsetenvironmentvarname来取消环境变量设置。

6.2.3设置日志文件
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

如何将当前进行调试过程中的GDB输出保存下来？可以通过setlogging命令进行设
置,这在调试时非常有用,可以记录调试的过程,以供以后来分析。GDB日志文件命令如
表6-2所示。
表6-2GDB日志文件命令
命令含义
setloggingon经屏幕输出同时输出到log文件中。默认输出为当前目录下的gdb.txt文件
setloggingoff关闭log
setloggingfilefile默认输出为gdb.txt,这样将当前输出的默认log文件改名
setloggingoverwrite默认情况下GDB日志输出是附加到log文件中的。设置为overwrite时,每次
均重写一个全新的文件
showlogging输出当前日志的设置

6.2.4获取帮助
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

GDB程序内置了丰富的命令使用手册,启动GDB程序后,终端使用help命令可以调
出命令使用手册。不带参数的help命令列出命令的分类。GDB将所有命令分为12类。使
用命令的分类作为help参数,你可以看到这个分类中所有命令的列表。最常用的几个命令
分类有breakpoints、running、stack、status等。
- breakpoints:断点命令,将程序在特定条件下停止执行。
- running:运行程序,包含将程序关联到进程、启动进程调试、单步执行、切换执
行线程等命令。
- stack:程序运行栈相关命令,如查看运行栈、在栈中各个栈帧之间切换等。
- status:状态查询命令,包含info和show命令。
示例6-1所示的是输出stack分类的所有命令列表。使用命令名称作为help参数将显

示这个命令的所有文档描述。使用apropos命令来搜索指定关键词相关命令。
示例6-1:
(gdb)helpstack
Examiningthestack.
Thestackismadeupofstackframes.Gdbassignsnumberstostackframes
countingfromzerofortheinnermost(currentlyexecuting)frame.
Atanytimegdbidentifiesoneframeasthe"selected"frame.
Variablelookupsaredonewithrespecttotheselectedframe.
Whentheprogrambeingdebuggedstops,gdbselectstheinnermostframe.
Thecommandsbelowcanbeusedtoselectotherframesbynumberoraddress.
Listofcommands:
backtrace--Printbacktraceofallstackframes
bt--Printbacktraceofallstackframes
down--Selectandprintstackframecalledbythisone
frame--Selectandprintastackframe
return--Makeselectedstackframereturntoitscaller
select-frame--Selectastackframewithoutprintinganything
up--Selectandprintstackframethatcalledthisone
Type"help"followedbycommandnameforfulldocumentation.
Type"aproposword"tosearchforcommandsrelatedto"word".
Commandnameabbreviationsareallowedifunambiguous.

6.2.5 命令总结
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

启动调试命令如表6-3所示
表6-3启动调试命令
命令含义
run启动调试程序,后面可以加启动参数
attach关联到正在运行中的进程

续表
命令含义
setargs设置程序启动时的参数。如果没有跟着参数将设置参数为空
showargs显示启动参数
setenvironment设置环境变量,这对已开始执行的程序没有影响
showenvironment如果没有参数显示所有的环境变量
unsetenvironment取消环境变量设置,这对已开始执行的程序没有影响
help获取帮助,没有参数将输出命令分类列表
apropos搜索命令帮助

6.3 断点管理
-----------------------------------------------------------

在执行程序调试时,我们经常想让程序在某处停止下来,然后查看程序当时的状态,
这就需要设置断点。断点是广义上的程序执行停止点,是指能导致程序停止的任何事情,
可以划分为指令断点、观察点和捕获点3种情况。

6.3.1 指令断点管理
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

指令断点一般简称为断点,设置断点命令为break,可以缩写为b,用来在调试的程序
中设置代码执行停止断点,可以设置为文件代码行或者是函数调用处。它有3个可选的参
数,命令格式为:
break[LOCATION][threadTHREADNUM][ifCONDITION]
LOCATION可以是代码行号、函数名或者一个带有星号的地址。
如果指定代码行,在所指定的代码行执行前停止。如果指定函数,在函数执行入口处
停止。如果指定了地址,则在指定地址处停止。如果没有参数,使用当前选择的栈帧的下
一行地址,这在返回到当前的栈帧时非常有用。
THREADNUM是线程号,可以用“infothreads”命令来查看线程号。CONDITION是
一个布尔表达式。

tbreak用于设置一个临时断点,和“break”命令类似,唯一不同的是它所设置的断点
为临时断点,当命中这个断点后将删除断点。
显示断点信息命令为infobreak[n…],运行这一命令将输出所有的指令断点、观察点
和捕获点。有一个可选的参数,这意味着可以仅输出指定的断点、观察点或捕获点。对于
每一个断点,输出内容如图6-1所示。
(gdb)infobreak
NumTypeDispEnbAddressWhat
1breakpointkeepy0x080489c6inmain
athello.c:50
图6-1断点信息
- 断点编号:GDB将指令断点、观察点、捕获点三者统一顺序编号,编号从1开始。
- 类型:是指令断点还是观察点,还是捕获点。
- 部署(Disposition):当执行到断点以后,是删除断点还是不再运行等。
- 使能状态:断点的使能状态,“y”表示断点启用,“n”表示断点不生效。
- 地址:断点的内存地址。如果断点的地址是未知的,显示“<PENDING>”。
- 位置(What):断点在程序源代码中的位置,例如文件和行号。
此外,还会显示断点的命中次数。这在调试时非常有用,可以查看代码行的执行次数。
在调试时,如果多次中断,我们在下次调试时,可以忽略前面命中的断点。
上面说了如何设置程序的断点。如果你觉得已定义好的断点不会再使用,你可以使用
clear、delete这两个命令来进行删除。
clear带有一个可选参数,参数可以为代码行号、函数名和带有星号的地址。如果指定
了行号,这一行的所有断点将被清除;如果指定了函数,则函数起始位置的所有断点将被
删除;如果指定了地址,则该地址位置的断点均被删除。如果没有参数,则在所选择的栈
帧当前位置删除所有断点。delete用于删除断点,如果不指定参数,将删除所有的断点。
参数为断点编号或者为断点范围。
比删除断点更好的方法是disable。这样断点将不生效但断点位置等信息得到了保留,
你可要在稍后再次启用它。命令格式如下:


disable[breakpoints][range...]
breakpoints为断点编号。如果什么都不指定,表示使所有的断点不生效。
enable[breakpoints][range...]
启用所指定的断点,breakpoints为断点编号。以下举例说明用法。
- (gdb)deletebreakpoint1
该命令将会删除编号为1的断点,如果不带编号参数,将删除所有的断点。
- (gdb)breakhello.c:60
该命令在文件hello.c的60行代码处设置行断点。如果是指定当前文件的代码行,可
以不指定文件名。
- (gdb)break67ifargc==2
该命令设置了一个条件断点,当argc为2时,执行到67行会触发这个断点。
- (gdb)disablebreakpoint1
该命令将禁止编号为1的断点,这时断点信息的使能域(Enb)将变为n。
- (gdb)enablebreakpoint1
该命令将允许编号为1的断点启用,这时断点信息的使能域(Enb)将变为y。
- (gdb)clear50
50为源文件的行号,该位置的所有断点将被删除。

6.3.2 观察点管理
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

观察点是一种特殊的断点,如果表达式修改了值程序执行就停止了。表达式可以是变
量,也可以是几个变量组合,有时会叫作数据断点。需要特别的命令来设置,其他对观察
点的管理命令和指令断点类似。
- watch:为表达式设置一个观察点。一旦表达式值发生变化时,马上停止执行程序。
- rwatch:设置读观察点。当读到表达式的值时,程序停止执行。
6.3断点管理113
- awatch:设置访问观察点。当表达式读或写时,将停止执行程序。
- infowatchpoints:列出当前设置的所有观察点。格式与内容和查看指令断点的内
容相同。

6.3.3捕获点管理
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

你可以用捕获点调试某些程序事件(event),例如C++异常、共享库的加载、系统调
用和进程启动等。使用catch命令来设置捕获点后,当事件发生时,程序会停止执行。常
见的事件有以下一些内容。
- throw:一个C++抛出的异常。
- exec:当程序执行exec函数创建进程时。
- syscall:参数为捕获系统调用它们的名字或编号。如果没有给出参数则每一个系
统调用将都被捕获到,例如调用open函数打开文件时。
- load:加载共享库时。
- fork:当程序调用fork创建进程时。
另外有tcatch命令,是设置临时捕获点,即这个捕获点被执行到时会自动删除,仅被
执行到一次。以下举例说明catch的用法。
- (gdb)catchsyscallopen
设置在系统调用open函数时停止执行。
- (gdb)catchfork
设置在创建新进程时停止执行。

6.3.4单步调试
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

当你的程序被停止执行时,你可以用continue命令恢复程序的运行直到程序结束,或
下一个断点到来。也可以使用step或next命令单步跟踪程序。
continue[ignore-count]:从断点停止的地方恢复程序执行。命令可以缩写为c。ignore-

count则表示忽略这个位置的断点次数。程序继续执行直到遇到下一个断点。
step:继续执行程序直到控制到达不同的源码行,然后停止执行并返回控制到GDB。
命令可以缩写为s。如果函数编译带有代码行信息,step命令将进入函数。否则行为和next
命令类似。后面可以加一个参数count,加参数表示执行count次step指令,然后再停住,
或者其他原因导致停住。
next:同样为单步跟踪,继续执行同一函数的下一行代码,这和step命令相似,但如
果有函数调用,它不会进入该函数内部。后面可以加数字N,不加则表示一条一条地执行,
加表示一次执行N条命令的行为,然后程序再停止。
finish:继续运行程序直到当前选择的栈帧返回,并输出返回值,命令缩写为fin。
until:执行程序直到大于当前已经执行的代码行,在程序循环时经常会用到它,即循
环体如果执行过一次,使用until命令将执行循环体完成之后下一行代码处停止。
以下举例说明。
- (gdb)next
单步执行,执行后将输出下一行代码。
- (gdb)finish
结束当前函数执行,或者碰到当前函数断点处停止执行。

6.3.5命令总结
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

断点管理命令表如表6-4所示。
表6-4断点管理命令表
命令含义
break在指定行或函数处设置断点
tbreak设置临时断点,在命中执行一次后就自动删除该断点
clear在所选择的栈帧中当前位置删除所有断点
deletebreakpoints删除断点,如果不指定参数将删除所有的断点
disablebreakpoints使断点失效,但仍保存在断点数据库中。例如disablebreakpoint1
enablebreakpoints启用断点。例如:enablebreakpoint1

续表
命令含义
watch设置观察点,当表达式的值发生改变时程序停止执行
rwatch设置读观察点,当表达式的值读取时,程序停止执行
awatch设置访问观察点,当表达式读或写时,将停止执行程序
step执行下一行代码,如果遇到函数则进入函数内部
next执行下一行代码,遇到函数并不进入函数内部
finish继续运行程序直到当前选择的栈帧返回,并输出返回值,命令缩写为fin
continue继续程序的执行,直到程序结束或者遇到下一个断点
until执行直到程序到达大于当前或指定位置。这种遇到循环时非常有用,可以跳
出当前的循环

6.4 查看程序运行状态
-----------------------------------------------------------

6.4.1查看栈帧信息
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

查看程序调用栈信息,当程序停止时,你第一个关注的是程序停止的代码位置和程序
的函数调用路径。当程序执行函数调用时,关于这次调用的信息(包含调用的代码位置、
传递的参数、函数的局部变量等信息)均保存到了一段内存当中,这段内存被称为栈帧或
桢(Frame)。所有的栈帧组合称为调用栈。
程序执行后将有很多帧,很多GDB命令均假定你选择了其中一个帧。例如你查看一
个变量值,这将在你所选的栈帧中输出局部变量的值,有一些命令用于你选择栈帧。当程
序停止时,GDB将自动选择当前执行的帧。栈帧编号是一个从0开始的整数,是栈中的层
编号。0表示栈顶,main函数所在的层为栈底。
backtrace[full]/[number]
backtrace将输出当前的整个函数调用栈的信息,整个栈的每个帧一行显示。backtrace
可以缩写为bt,如果带有“full”限定符,将输出所有局部变量的值。参数number可以是
一个正整数或负整数,表示只打印栈顶/栈底n层的栈信息。backtrace输出如示例6-2所示。

示例6-2:
(gdb)backtrace
#0read_conf(hello=0x804a080<hello>)athello.c:31
#10x080489e1inmain(argc=1,argv=0xbffff064)athello.c:57
调用栈的每一行显示包含4部分,包含帧编号、函数名、函数的参数名称和传入的实
参、调用的源代码文件名和行号。从示例6-2可以看出,程序在hello.c文件第31行处停
止执行,函数的调用顺序信息为:main()-->read_conf()。
frame为选择和输出栈帧。如果没有参数,输出当前选择的栈帧。如果有参数,表示
选择这个指定的栈帧。参数可以是栈帧编号或者地址。打印出的信息有:栈帧的层编号、
当前的函数名、函数参数值、函数所在文件及行号,以及函数当前执行到的代码行语句。
up:选择和输出栈帧,不带参数表示选择向上移动一层栈帧。可以带有参数来移动
多层。
down:不带参数表示选择向下移动一层栈帧。可以带有参数来移动多层。
return:返回到当前栈帧的调用处。
infoframe:显示栈帧的所有信息。
示例6-3显示了当前选择栈帧的详细信息,包含栈帧地址、调用函数的地址、被调用
栈帧的地址、源代码的编程语言、参数地址和内容等。
示例6-3:
(gdb)infoframe
Stacklevel0,frameat0xbfffed80:
eip=0x80488c8inread_conf(hello.c:33);savedeip=0x80489f5
calledbyframeat0xbfffefd0
sourcelanguagec.
Arglistat0xbfffed78,args:hello=0x804a080<hello>
Localsat0xbfffed78,Previousframe'sspis0xbfffed80
Savedregisters:
ebpat0xbfffed78,eipat0xbfffed7c
栈帧的调用关系只能在同一个线程中查看,如果一个程序有多个线程同时执行,

我们可以输入thread命令和参数线程编号来在线程之间切换。线程是操作系统能够进
行运算调度的最小单元,线程之间共享其父进程中的所有资源,线程也有自己独立的
调用栈空间。经常使用的线程命令有查询所有线程命令“infothreads”和切换线程命
令“thread”。

6.4.2查看运行中的源程序信息
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

GDB可以打印调试程序的源代码,由于你在编译时增加了-g参数,调试信息保存在
可执行程序中,当你的程序停止执行时,GDB将输出停止位置。这时你就可以开始调试了。
使用list等命令来查看当时编译的源代码等。
list如果没有参数,输出当前10行代码或者紧接着上次的代码。“list-”输出当前位置
之前的10行代码,注意带有一个中划线作为参数。list命令参数也可以是一个代码行或函
数名:如果为代码行,则列出指定行的代码;如果为函数名,则列出函数名附近的代码。
示例6-4列出了main函数附近的代码。
示例6-4:
(gdb)listmain
47return0;
48}
49
50structHellohello;
51intmain(intargc,char*argv[])
52{
53/*
54charagent[50]="openwrt";
55charurl[100]="http://bjbook.net/bk/openwrt";
56
6.4.3查看运行时数据
使用print命令可以输出执行程序时的运行数据,例如表达式的值,但是需要在你的
调用栈环境下,例如全局变量、静态全局变量和局部变量等。可以用print命令和x命令

来查看表达式和地址的内容。
print/fmtexp
表示输出表达式的内容。如果局部变量和全局变量名称相同,则默认为输出局部变量
的内容,如果需要输出全局变量,则需要增加全局限定符(为双冒号,::)。
如果输出静态全局变量,则需要加文件名限定符printhello.c'::x
如果变量为数组,则需要@字符配合才能输出数组的内容,@的左侧是数组的地址,
右侧是数字的长度。如果是静态数组的话,可以直接用print数组名,就可以显示数组中
所有数据的内容。例如输出main函数的第argc个参数内容:
(gdb)print*argv@argc
$16={0xbffff259"/home/zhang/book/elk/openwrt/hello/src/hello"}
某些情况下,程序变量的值不能被输出,因为你的程序打开了编译优化功能。这种情
况下,需要你在编译时关闭编译优化功能。
你可以使用x来查看内存地址中的值。x命令的语法如下所示:
x/FMTADDRESS
ADDRESS是一个内存地址。
FMT是格式字符和多少个同样格式的内容连接在一起。
一般来说,GDB会根据变量的类型输出变量的值。但你也可以自定义print的输出格
式。例如,你想输出一个整数的十六进制,或是二进制来查看这个整型变量中的位的情况。
要做到这样,你可以使用GDB的数据显示格式。
- x:按十六进制格式显示变量。
- d:按十进制格式显示变量。
- u:按十六进制格式显示无符号整型。
- o:按八进制格式显示变量。
- t:按二进制格式显示变量。
- a:按十六进制格式显示变量。
6.4查看程序运行状态119
- c:按字符格式显示变量。
- f:按浮点数格式显示变量。
程序执行过程中,有一些专用的GDB变量可以用来检查和修改计算机的通用寄存器,
GDB提供了目前每一台计算机中实际使用的4个寄存器的标准名字。
- $pc:程序计数器。
- $fp:帧指针(当前堆栈帧)。
- $sp:栈指针。
- $ps:处理器状态。

6.4.4命令总结
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

查看程序运行状态命令总结如表6-5所示。
表6-5查看程序运行状态命令总结
命令含义
backtrace输出堆栈调用信息
btfull显示堆栈的详细信息
infoframe显示所选栈帧的所有信息
list显示源代码,如果没有参数将显示当前位置的10行代码
print输出变量的内容
x显示内存地址内容,命令格式为x/FMTADDRESS
inforegisters列出寄存器及内容
frame选择和输出栈帧信息
up不带参数表示选择向上移动一层栈帧。可以带有参数来向上移动多层
down不带参数表示选择向下移动一层栈帧。可以带有参数来向下移动多层
infothreads输出程序中所有的线程。可以带有一个参数仅输出指定线程
thread在多个线程之间切换。线程编号从1开始,带有一个数字参数来指定要切换的
线程

6.5 动态改变——改变程序的执行
-----------------------------------------------------------

利用GDB调试你的程序时,如果你觉得程序运行流程不符合你的期望,或者某个变
量的值不是你所期望的,你可根据自己的思路来临时修改程序变量的值,这样就可以修改
程序的运行过程来验证是否是这个变量导致的BUG。
- 修改变量的值,通过print或者set命令来修改变量值。(gdb)printargc=2
- 从不同的地址处执行,当程序在断点处停止时,你可以使用continue命令继续
执行,也可以使用jump指定下一条语句的运行点。参数可以是文件的行号,可
以是file:line格式,可以是+num这种偏移量格式。表示着下一条运行语句从哪
里开始。
- signal产生信号,一般用于模拟进程收到信号的处理情况,例如signal9。
- 强制函数返回,可以通过调用return命令来取消函数的继续执行,去返回到调用处。可以带有一个参数,这个参数用于函数返回值。
- 调用函数,通过call来调用函数,也可以使用print来调用函数。
修改程序命令总结如表6-6所示。
表6-6修改程序命令总结
命令含义
print输出并修改程序值
set修改程序值
jump跳转到指定行或地址来继续执行,最好在同一函数内部跳转
signal向程序发信号。例如signal9将发出杀掉进程的信号
return强制函数返回,不会继续执行函数的剩余代码
call调用函数,不输出函数返回值
