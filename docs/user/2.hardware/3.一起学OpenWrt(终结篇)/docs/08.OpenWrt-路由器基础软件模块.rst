08.OpenWrt-
===========================================================

OpenWrt支持模块化编程,已经支持很多常见的功能,因此只需打开开关即可增加其功能。但有一些通用基础模块必须包含,这些组件在OpenWrt的运转中至关重要,它们是OpenWrt的核心。本章介绍其中5个组件,分别是实用基础库libubox、系统总线ubus、网络接口管理模块netifd、核心工具模块ubox和服务管理模块procd。

8.1libubox
-----------------------------------------------------------

libubox是在2011年加入OpenWrt的代码库的。它是OpenWrt中的一个核心库,封装了一系列基础实用功能,主要提供事件循环、二进制块格式处理、Linux链表实现和一些JSON辅助处理。它的目的是以动态链接库方式来提供可重用的通用功能,给其他模块提供便利和避免再造轮子。这个软件由许多独立的功能组成,主要划分为3个软件包libubox、jshn和libblobmsg-json。

8.1.1libubox
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

libubox软件包是OpenWrt12.09版本之后增加到新版本中的一个基础库,在OpenWrt15.07中有很多应用程序是基于libubox开发的,如ubus、netifd和freecwmp等。libubox主要提供以下三部分功能。
(1)提供多种基础通用功能接口,包含链表、平衡二叉树、二进制块处理、key-value链表、MD5等。
(2)提供多种sock接口封装。
(3)提供一套基于事件驱动的机制及任务队列管理功能。

这样带来了一些好处:我们不用关注底层基础功能,可以基于libubox提供的稳定API来进行进一步的功能开发。utils.h提供简单实用功能,包括字节序转换、位操作、编译器属性包装、连续的内存分配函数、静态数组大小的宏、断言/错误的实用功能和base64编码解码等功能。blob.h提供二进制数据处理功能。有几种支持的数据类型,并可以创建块数据在socket上发送。整形数字会在libubox库内部转换为网络字节序进行处理。二进制块的处理方法是创建一个TLV(类型-长度-值)链表数据,支持嵌套类型数据,并提供设置和获取数据接口。Blobmsg位于blob.h的上层,提供表格和数组等数据类型的处理。TLV是用于表示可变长度的数据格式,Type表示数据的类型,Length表示数据的长度,Value存储着数据值。类型和长度的占用空间是固定的,在libubox库中共占用4个字节。Value的长度由Length指定。这样可以存储和传输任何类型的数据,只需预先定义服务器
和客户端之间的TLV的类型和长度的空间大小即可。在DHCP协议中也是采用TLV数据类型来传输扩展数据的。usock.h是一个非常简单的socket对象封装,以避免所有这些套接字接口库复杂调用。可以创建TCP、UDP和UNIX套接字,包含客户端和服务器端、IPv4/IPv6、阻塞/非阻塞等。可以通过usock函数来返回所创建的文件描述符。uloop.h是提供事件驱动机制接口,是基于epoll接口来实现的。uloop是一个I/O循环调度,将不同的文件描述符添加到轮询中。文件描述符fd的管理由uloop_fd结构来设置。仅需设置fd和事件发生时的回调函数,数据结构的其他部分供内部使用。超时管理部分由uloop_timeout结构来管理,在定时时间到了之后调用回调函数,定时时间单位为毫秒。libubox常用uloop接口函数如表8-1所示。

表8-1libubox常用uloop接口函数
接口名称含义
uloop_fd_add将一个新文件描述符增加到事件处理循环中
uloop_fd_delete从事件处理循环中删除指定的文件描述符
uloop_init初始化uloop.内部将调用epoll_create函数来创建epoll对象
uloop_run进入事件处理循环中
uloop_done反初始化uloop,即释放内部epoll对象,删除内部的超时和process对象
uloop_end设置uloop内部结束循环标志
uloop_timeout_set设置定时器超时时间,并增加到链表中

8.1.2jshn
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

jshn是封装JSON对象的转换库,用于脚本语言生成JSON对象和将JSON对象数据取出。jshn软件包含两个文件分别为jshn和jshn.sh。工具jshn提供以下两部分功能。
(1)读取JSON格式的字符串,并组合为json_add_*命令导出到标准输出(stdout)中。
(2)将环境变量中的设置组合为JSON字符串,并输出到标准输出中。jshn可以通过-r选项来读取JSON格式字符串,并按照类型和名称导出到标准输出中。通过-w选项可以读取环境变量设置来生成JSON对象字符串。jshn.sh是利用jshn工具对JSON的操作进行的更为便利的封装。这样其他模块可以更方便地进行操作。主要提供以下三部分功能。
(1)将JSON格式的字符串在环境变量中导入和导出。
(2)将配置内容设置到环境变量中。
(3)从环境变量中查询配置设置的值。

jshn.sh定义了大量的函数来对JSON数据进行编程操作。其内部实现是将定义的变量存储在shell空间中,这样可以用函数来操作每一个JSON对象。在操作完成后调用json_dump函数输出所有的内容。在使用jshn.sh中的函数之前,需要使用source命令来执行jshn.sh。source命令是在当前环境下执行的,其设置的环境变量对其后面的命令都有效。source命令和点命令“.”等效。jshn定义的命令接口含义如表8-2所示。
表8-2jshn定义的命令接口含义
函数命令含义
json_init初始化JSON对象
json_add_string增加字符串数据类型,例如json_add_stringnamezhang
json_dump以JSON格式输出所有增加的JSON内容
json_add_int增加整型数据,例如json_add_intage36
json_add_boolean增加布尔类型数据
json_set_namespace定义命名空间,即定义设置变量的前缀,这样变量就可以区分开来
json_load将所有内容读入到JSON对象中,并将这些对象设置到环境变量中


函数命令含义
json_get_var从环境变量中读取JSON对象的值,例如json_get_varifdevdevice获取device的值并赋值给ifdev变量
json_get_type从环境变量中读取指定JSON对象的类型,例如json_get_typeiftypedevice获取device的类型并赋值给iftype变量
json_get_keys从环境变量中读取JSON对象的所有名称,例如json_get_keyskeys获取所有的名称并赋值给keys变量
json_get_values从环境变量中读取JSON对象的所有值,例如json_get_valuesvalues将获取所有的值并赋值给values变量
json_select选择JSON对象。因为JSON对象会嵌套JSON对象,因此在操作内部嵌套对象时首先选择所操作的JSON对象,例如:选择111这个对象进行操作:json_select111选择上一层JSON对象:json_select..
json_add_object增加对象,其后的操作均在该对象内部进行操作,该命令不需要参数
json_close_object完成对象的增加
json_add_array增加顺序数组,例如json_add_arraystudy,数组的内容后续通过json_add_string来增加
json_close_array完成顺序数组的增加
json_cleanup清除jshn所有设置的环境变量
JSON(JavaScriptObjectNotation)是一个轻量级的数据交换格式,易于人阅读和编写,对程序来说也容易解析和产生。JSON是一个独立于语言的文本格式,使用各种语言都非常方便转换。JSON有以下两种结构。
(1)“名称/值”对集合对象。由顺序无关的“名称/值”对组成,以左花括号开始,以右花括号结束。“名称/值”对之间由逗号分割,每一个名称后面跟着冒号。
(2)有序的列表值,在大多数语言中,是一个数组、向量、链表或序列等。JSON中以数组形式来顺序存储。数组以左中括号开始,以右中括号结束,数据值以逗号分隔。以下为两种典型结构示例:
{"action":"ifdown","interface":"wan"}
{"dns_server":["58.30.131.33","211.99.143.33"]}
我们以一个实际使用案例来结束本节。示例8-1所示的是从netifd-proto.sh中摘出部分
代码组织为一个独立的可执行脚本,该脚本将输出要执行的动作命令和参数。

示例8-1:
source/usr/share/libubox/jshn.sh#导出json_开头的函数,使后续可以调用
json_init#初始化
json_add_initaction2#增加执行动作
json_add_initsignal9#增加信号量
json_add_string"interface""wan"#增加操作的接口
#这时将所有JSON字符串保存到环境变量中。可以使用env命令来查看
json_dump#输出前面设置的所有JSON字符串
{"action":"2","signal":"9","interface":"wan"}

8.2ubus
-----------------------------------------------------------

OpenWrt提供了一个系统总线ubus,它类似于Linux桌面操作系统的d-Bus,目标是提供系统级的进程间通信(IPC)功能。ubus在设计理念上与d-Bus基本保持一致,提供了系统级总线功能,与d-Bus相比减少了系统内存占用空间,这样可以适应于嵌入式Linux操作系统的低内存和低端CPU性能的特殊环境。ubus是OpenWrt的RPC工具,是OpenWrt的微系统总线架构,是在2011年加入OpenWrt中的。为了提供各种后台进程和应用程序之间的通信机制,ubus工程被开发出来,它由3部分组成,分别为精灵进程、接口库和实用工具。这个工程的核心是ubusd精灵进程,它提供了一个总线层,在系统启动时运行,负责进程间的消息路由和传递。其他进程注册到ubusd进程进行消息的发送和接收。这个接口是用Linux文件socket和TLV(类型-长度-值)收发消息来实现的。每一个进程在指定命名空间下注册自己的路径。每一个路径都可以提供带有各种参数的多个函数处理过程,函数处理过程程序可以在完成处理后返回消息。接口库名称为libubus.so,其他进程可以通过该动态链接库来简化对ubus总线的访问。实用工具ubus是提供命令行的接口调用工具。可以基于该工具来进行脚本编程,也可以使用ubus来诊断问题。


ubus代码基于LGPL2.1发布,代码地址为http://git.openwrt.org/project/ubus.git,在
OpenWrt12.09版开始正式使用。

8.2.1ubusd
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

/etc/init.d/ubus中提供ubusd进程的启动,在系统进程启动完成之后立即启动。它是在网络进程netifd之前启动的,该进程监听一个文件套接字接口和其他应用程序通信。其他应用程序可基于libubus提供的接口或使用ubus命令行程序来和ubusd进行通信。ubus提供的功能主要有以下4个方面。
(1)提供注册对象和方法供其他实体调用。
(2)调用其他应用程序提供的注册对象的控制接口。
(3)在特定对象上注册监听事件。
(4)向特定对象发送事件消息。
ubus将消息处理抽象为对象(object)和方法(method)的概念。一个对象中包含多个方法。对象和方法都有自己的名字,发送请求方在消息中指定要调用的对象和方法名字即可。
ubus的另外一个概念是订阅(subscriber)。客户端需要向服务器注册收到特定消息时的处理方法。这样当服务器在状态发生改变时会通过ubus总线来通知给客户端。ubus可用于两个进程之间的通信,进程之间以TLV格式传递消息,用户不用关心消息的实际传输格式。ubus能够以JSON格式和用户进行数据交换。常见的应用场景有以下
两种情况。
(1)客户端/服务器模式,即进程A提供一些逻辑较复杂的记忆状态的服务,并且常驻内存中。进程B以命令行工具或函数API形式调用这些服务。
(2)订阅通知模式,即设计模式中的观察者模式。定义了对象间的一种一对多的依赖关系,以便当一个对象的状态发生改变时,所有依赖于它的对象都得到通知并自动更新。即进程A作为服务器,当对象状态改变时通知给它所有的订阅者。ubus是一个总线型消息服务器,任何消息均通过ubusd进程传递,因此多个进程在相

互通信时,均通过ubus收发消息。其原理如图8-1所示。
uhttpd
Ubus
图8-1ubus消息总线的原理
netifd模块就是通过libubus动态链接库提供的API接口向ubus总线注册了很多对象
和方法,这些在netifd一节讲述。libubus提供的接口函数如表8-3所示。
表8-3libubus常用接口函数含义
函数含义
ubus_add_object将对象加入的ubus空间中,即客户端可以访问对象
ubus_register_subscriber增加订阅通知
ubus_connect连接指定的路径,创建并返回路径所代表的ubus上下文
ubus_send_reply执行完成方法调用后发送响应
ubus_notify给对象所有的订阅者发送通知
ubus_lookup查找对象,参数path为对象的路径,如果为空则查找所有的对象。cb
为回调函数,对查找结果进行处理
ubus_lookup_id查找对象的id,并将id参数在指针中返回
ubus_invoke调用对象的方法
ubus_register_event_handler注册事件处理句柄
ubus_send_event发送事件消息

8.2.2ubus命令行工具
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ubus命令行工具也使用libubus提供的API接口来和ubusd服务器交互。这在调试注册的命名空间对象和编写shell脚本时非常有用。ubus调用参数和返回响应都使用非常友好的JSON格式。ubus提供5种命令来进行消息通信,下面所示的代码是不带参数的命令输出。


root@zhang:~#ubus
Usage:ubus[<options>]<command>[arguments...]
Options:
-s<socket>:Settheunixdomainsockettoconnectto
-t<timeout>:Setthetimeout(inseconds)foracommandtocomplete
-S:Usesimplifiedoutput(forscripts)
-v:Moreverboseoutput
Commands:
-list[<path>]Listobjects
-call<path><method>[<message>]Callanobjectmethod
-listen[<path>...]Listenforevents
-send<type>[<message>]Sendanevent
-wait_for<object>[<object>...]Waitformultipleobjectstoappear
onubus
list命令在默认情况下,输出所有注册到ubusRPC服务器的对象。list命令是通过调
用ubus_lookup接口函数来列出所有的服务器对象的。返回信息由传入ubus_lookup函数的
第三个参数receive_list_result处理,这个参数是一个回调函数,负责将结果输出到屏幕上。
如果使用-v参数,指定对象(命名空间路径)的所有方法和参数将全部输出屏幕中。
示例8-2列出了局域网接口对象的所有方法和参数。
示例8-2:
root@zhang:~#ubuslistnetwork.interface.lan-v
'network.interface.lan'@02877eac
"up":{}
"down":{}
"status":{}
"prepare":{}
"add_device":{"name":"String"}
"remove_device":{"name":"String"}
"notify_proto":{}
"remove":{}
"set_data":{}


Call命令在指定对象里调用指定的方法并传递消息参数。Call命令首先调用ubus_lookup_id函数找到指定对象的ID,然后通过ubus_invoke函数调用来请求服务器,返回的结果使用receive_call_result_data来处理。消息格式必须是合法的JSON字符串格式,根据函数签名来传递正确的JSON字符串作为方法参数。例如:
root@zhang:~#ubuscallnetwork.devicestatus'{"name":"eth0"}'
listen命令设置一个监听套接字来接收服务器发出的消息。listen命令是通过
ubus_register_event_handler函数来注册事件回调处理函数的。示例8-3所示的代码是在一个终端窗口启动监听,在另外一个窗口执行调用down和up方法,然后就会在第一个窗口上观察到对象状态发生改变。
示例8-3:
#在第一个终端执行监听
root@zhang:~#ubuslisten
{"network.interface":{"action":"ifdown","interface":"wan"}}
{"network.interface":{"action":"ifup","interface":"wan"}}
#在另外一个终端执行动作
root@zhang:~#ubuscallnetwork.interface.wandown
root@zhang:~#ubuscallnetwork.interface.wanup
send命令用于发出一个通知事件,这个事件可以使用listen命令监听到。send命令是通过调用ubus_send_event函数来实现的。命令行的发送数据格式必须为JSON格式,在程序中通过调用blobmsg_add_json_from_string函数转换为ubus的TLV格式。如果有多个监听客户端,多个监听客户端会同时收到事件。发送通知事件通常需要两个参数,第一个参数为指定对象,第二个参数为事件消息内容。示例8-4首先在第一个终端启动监听hello对象的事件消息,然后在第二个终端使用send命令向hello对象发送通知消息。
示例8-4:
root@zhang:~#ubuslistenhello
{"hello":{"book":"openwrt"}}
root@zhang:~#ubussendhello'{"book":"openwrt"}'
wait_for命令用于等待多个对象注册到ubus中,当等待的对象注册成功后即退出。



8.3 netifd
-----------------------------------------------------------

netifd(networkinterfacedaemon)是一个管理网络接口和路由功能的后台进程,是一个使用C语言编写的带有RPC能力的精灵进程,它和内核系统通信采用Netlink接口来操作,采用ubus总线来提供RPC,这样比直接使用Linux内核的管理接口更方便。Netlink是Linux操作系统内核和用户空间的通信机制,通常用于在内核和用户空间进程之间传输数据。它由针对用户空间的标准socket接口和内核空间的内部API模块组成。RFC3549对Netlink有详细的介绍。netifd也提供接口来提供扩展功能。netifd不需要shell脚本就可以设置静态IP配置。对于其他的IP设置(例如PPPoE或DHCP)就需要一系列的shell脚本来处理协议实现。

8.3.1 概述
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

netifd主要包含设备和接口对象。一个设备代表着一个Linux物理接口或者一个虚拟链路接口,例如eth0或ppp接口。任何需要关注设备状态的对象就注册为设备用户(device_user),当设备状态发生改变时就会通过回调函数来通知设备用户。当最后一个设备用户移除时,设备自己就立即释放。设备也可以引用其他设备,这是用于管理各种设备,例如网桥或虚拟局域网(VirtualLocalAreaNetwork,VLAN)。这样将不用对各种设备进行区别对待,但需要通过热插拔来增加更多的成员接口,这在管理网桥设备时非常有用。设备类型用结构体structdevice_type来保存,这个类似于C++语言的虚基类,定义了一些接口函数而没有实现。在定义实体设备变量时,对设备类型和函数进行赋值,这相当于C++语言的子类。表8-4所示的是各种设备类型。
表8-4各种设备类型设备类型含义simple_device_type简单设备bridge_device_type网桥设备,网桥设备可以包含多个简单设备

续表
设备类型含义
tunnel_device_type隧道设备,例如在以太网上封装GRE报文
macvlan_device_type一个物理网卡上创建另外一个MAC地址的网卡,即在真实的物理网卡
上再虚拟出来一个网卡
vlandev_device_type一个物理网卡通过VLANID来划分为多个网卡
设备的启动和关闭状态通过引用计数来管理。设备可以通过claim_device函数来启用,
通过release_device函数来释放。一旦引用计数为零,设备将立即关闭。如果设备没有成功
启动,claim_device函数将返回非零值,设备的引用计数不会增加。一个注册的设备可能
不能立即可用,一个接口或其他设备也可以关联上它,等待它出现在系统中来支持通过热
插拔触发接口。
所有的设备状态通过事件机制通知给设备用户注册的回调函数。表8-5所示的是主要
支持的设备事件类型及含义。
表8-5设备事件类型及含义
事件类型含义
DEV_EVENT_ADD系统中增加了设备,当设备用户增加到一个存在的设备上时,这个事
件立即产生
DEV_EVENT_REMOVE设备不再可用,或者是移除了设备或者是不可见了。所有的设备用户
应当立即移除引用并且清除这个设备的状态
DEV_EVENT_SETUP设备将要启动,这允许设备用户去应用一些必要的低级别的配置参数,
这个事件并不是在所有情况下均被触发
DEV_EVENT_UP设备已经启动成功
DEV_EVENT_TEARDOWN设备准备关闭
DEV_EVENT_DOWN:设备已经关闭
一个接口代表着应用于一个或多个二层设备的三层配置。一个活动的接口必须总是绑
定到一个主设备到一个三层设备上。基于一个简化的协议,例如静态配置或DHCP等,默
认情况是三层接口点引用一个主设备。更复杂的协议处理(如PPP/PPTP或VPN软件)可
以重新映射到其他三层接口上。其他模块(例如防火墙)如果必要时会关注这些接口。一
个接口有以下4种状态。
●IFS_SETUP:协议处理函数正在配置当前接口。
●IFS_UP:接口完全配置成功。


●IFS_TEARDOWN:接口正在关闭中。
●IFS_DOWN:接口已经关闭。
所有的接口均有一个协议处理函数。协议处理函数(例如PPP协议)可以设置一个辅
助协议处理函数(例如PPPoE或PPTP)。协议处理函数是在状态改变时提供的回调函数,
一个简单情况是直接关联在接口上。协议状态处理函数跟踪结构体interface_proto_state状
态,它依赖于它所控制的实体的状态。协议处理函数响应PROTO_CMD_SETUP和PROTO_
CMD_TEARDOWN命令,它不会花费很长时间,是通过向主线程发送IFPEV_UP和
IFPEV_DOWN来实现的。
如果设置会在非常短的时间内完成,回调函数会处理并立即发送事件消息。如果
设置需要花费比较长的时间,应当使用uloop函数来调度异步动作,如果必要则创建进
程来执行。
协议处理函数必须在遇到PROTO_CMD_TEARDOWN命令时能中止设置。当执行
PROTO_CMD_TEARDOWN命令调用并且设置了force参数时,协议处理函数需要尽可能
快地清除而不等待排队任务处理完成。如果有任何子进程,需要杀掉并清除子进程。
简单的协议处理函数可以设置PROTO_FLAG_IMMEDIATE标志。如果协议处理函数
可以立即执行所有的动作而不用等待,那就不需要调用IFPRE_UP和IFPRE_DOWN事务,
这将引起这些事件直接被核心代码处理。
netifd还包含路由和策略路由(rule)的配置,它读取network中的配置项,并调用
Netlink接口写入到内核中。这部分在路由部分来讲述。
netifd有一个__init宏定义,这个宏定义是利用gcc编译器的初始化功能,定义了__init
修饰的函数在main()函数之前执行。__init宏定义如下:
#define__init__attribute__((constructor))

8.3.2netifd方法
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

netifd在ubus中注册了一些对象和方法,启动netifd进程之后,就可以通过“ubuslist”
命令来查看注册的对象。netifd注册了3种对象,分别为network、network.device和
network.interface。

root@zhang:~#ubuslist
network
network.device
network.interface
network.interface.lan
network.interface.loopback
network.interface.wan
每一个对象都包含有一些方法,而每个ubus方法都注册了一个接口函数来进行处理。
network对象全局接口方法如表8-6所示。
表8-6network对象方法
方法函数含义
restartnetifd_handle_restart整个进程关闭后重新启动
reloadnetifd_handle_reload重新读取配置来初始化网络设备
add_host_routenetifd_add_host_route
增加静态主机路由,是根据当前的路由增加了一个更
为具体的路由表项,目的地址为IP地址而不是IP网
段。例如:
ubuscallnetworkadd_host_route'{"target":"192.168.1.
20","v6":"false"}',将增加一个静态主机的接口路由
get_proto_handlersnetifd_get_proto_handlers获取系统所支持的协议处理函数,该方法不需
要参数
network.device是一个二层设备接口,已经向ubus总线注册的方法有3个,如表8-7
所示。
表8-7network.device对象方法
方法函数含义
statusnetifd_dev_status
获取物理网卡设备的状态,包含统计信息,
例如ubuscallnetwork.devicestatus'{"name":"eth0"}'
set_aliasnetifd_handle_alias设置alias,这个很少用到
set_statenetifd_handle_set_state设置状态,这个也很少用到
network.interface是一个三层接口,可以包含多个二层网卡设备,如果接口启动则包含
IP地址、子网掩码、默认网关和域名服务器地址等信息。它提供的方法如表8-8所示。


表8-8network.interface对象方法
方法函数含义
upnetifd_handle_up启动接口
downnetifd_handle_down关闭接口
statusnetifd_handle_status查看接口状态,如果为启动,则包含启动时间、IP地址等
add_devicenetifd_iface_handle_device增加设备
remove_devicenetifd_iface_handle_device删除设备
notify_protonetifd_iface_notify_proto调用原型函数,在netifd-proto.sh中会使用到
removenetifd_iface_remove删除接口
set_datanetifd_handle_set_data设置额外的存储数据,可以通过status方法来查看
如果在对象中未指定接口名称,则需要在参数中指定接口名称。例如我们获取lan接
口的状态可以通过以下两种方法调用:
ubuscallnetwork.interfacestatus'{"interface":"lan"}'
ubuscallnetwork.interface.lan
interface对象的notify_proto方法共注册了0~7共8种动作处理函数,分别用于处理
各种不同的情况。在netifd-proto.sh中封装为不同的shell命令如表8-9所示。
表8-9netifd注册的shell命令
编号shell命令含义
0proto_init_update初始化设备及配置
1proto_run_command运行获取IP地址命令,例如启动dhcp客户端或者启动ppp
拨号
2proto_kill_command杀掉协议处理进程,例如杀掉udhcpc进程
3proto_notify_error通知发生错误
4proto_block_restart设置自动启动标示变量autostart为false
5proto_set_available设置接口的available状态
6proto_add_host_dependency增加对端IP地址的路由
7proto_setup_failed失败后设置状态
编号为在netifd进程和shell脚本之间的预先定义好的处理动作ID。在netifd-proto.sh
中设置,通过ubus消息总线传递到netifd进程中,根据功能编号来进入到相应的处理
函数。Shell脚本导出的命令供各种协议处理函数调用。例如DHCP处理过程中会首先调
8.3netifd157
用proto_init_update函数来初始化设备,初始化完成之后会通过proto_run_command命令
来启动udhcpc进程获取IP地址等信息。
静态IP配置不需要Shell脚本就可以进行IP配置,其他的设置例如DHCP或PPPoE
就需要一系列的Shell脚本来进行设置。每一种的协议处理的脚本都放在/lib/netifd/proto
目录下。文件名通常和网络配置文件network中的协议选项关联起来。为了访问网络功能
函数,这些脚本通常在文件开头导入一些通用功能的Shell脚本,例如functions.sh脚本和
netifd-proto.sh脚本。
协议处理脚本被调用时的工作目录是/lib/netifd/proto/。在协议处理脚本的结尾应当通
过调用add_protocol函数来注册自己。协议处理通常至少需要定义两个Shell函数,分别为
初始化配置函数和设置函数。我们以DHCP协议为例进行说明。
(1)proto_dhcp_init_config。这个函数负责协议配置的初始化,主要目的是让netifd
知道这个协议所拥有的参数。这些参数存储在/etc/config/network配置文件中。
proto_dhcp_init_config(){
renew_handler=1
proto_config_add_string'ipaddr:ipaddr'
proto_config_add_string'hostname:hostname'
proto_config_add_stringclientid
proto_config_add_stringvendorid
proto_config_add_boolean'broadcast:bool'
proto_config_add_string'reqopts:list(string)'
proto_config_add_stringiface6rd
proto_config_add_stringsendopts
proto_config_add_booleandelegate
proto_config_add_stringzone6rd
proto_config_add_stringzone
proto_config_add_stringmtu6rd
proto_config_add_stringcustomroutes
}
(2)proto_dhcp_setup。这个函数负责协议的设置,主要目的是实现了实际DHCP协
议配置和接口启动。当被调用时,传递两个参数,第一个参数是配置节名称,第二个参数是接口名称。任何协议处理都必须实现设置函数。这个函数通常是读取配置文件中的参数,然后将
参数传递给netifd。DHCP协议在这个函数中组织DHCP参数传递给udhcpc进程。
(3)proto_dhcp_teardown。这个函数负责接口关闭动作,如果协议需要特别的关
闭处理,例如杀掉udhcpc进程,调用停止功能等。这个函数在我们使用ifdown命令
关闭接口时调用,或者是netifd探测到链路连接失去时调用。这个函数是通常可选的,
调用时需要传递一个参数为UCI配置节名称,用于config_get函数调用时获取UCI
配置。
8.3.3netifd文件
netifd还包含一些非常方便用户操作的命令,这些命令调用ubus命令来查询netifd进
程提供的设备和网络接口管理服务。
●/sbin/ifup:启动接口。
●/sbin/ifdown:关闭接口。
●/sbin/devstatus:获取网卡设备状态。
●/sbin/ifstatus:获取接口的状态。
ifup和ifdown实际上为一个文件,ifdown是指向ifup的软链接。这两个脚本由同
一个文件ifup实现。在执行时会判断执行的文件名称,然后传递相应的参数。如果传
递-a选项则表示所有的接口,这两个命令可以传递接口名称,例如lan或wan接口,
来控制局域网接口和互联网接口的状态,实际上是通过调用ubus命令来控制的。命令
如下:
ubuscallnetwork.interface.<lan/wan><down/up>
devstatus命令需要一个参数,参数传递一个网卡设备名称,devstatus命令将设备名称
转换为JSON格式后通过ubus总线传递给netifd,最后调用的命令为:
ubuscallnetwork.devicestatus'{"name":"eth0"}'
ifstatus命令用于获取接口的状态,该命令首先判断是否传递了参数,需要传递接口
8.3netifd159
名称作为参数。接着使用list方法来查看接口对象是否存在。最后通过接口的status方法
来获取接口状态,这个方法的签名使用ubuslist查看显示没有参数,但在实际调用时必
须传递接口名称作为参数才能成功。如果我们查看局域网接口的状态,最后调用的命
令为:
ubuscallnetwork.interfacestatus'{"interface":"lan"}'
8.3.4网络配置
网络功能的配置文件在/etc/config/network中。这个配置文件定义了二层网络设备
Device和网络接口Interface、路由和策略路由等配置。网络接口配置根据协议的不同包含
的选项不同。常见的协议有静态配置、DHCP及PPPoE等。接口配置协议不同,支持的配
置选项不同。协议配置以proto来做区分,如果为static则需要设置IP地址和网络掩码等。
DHCP,表示通过动态主机控制协议获取IP信息。PPPoE,表示通过拨号来获取IP。
如果网络服务提供商(ISP)提供固定IP地址,则使用静态配置,另外局域网接口通
常为静态配置。静态配置可以设置的选项见表8-10。
表8-10Interface静态配置选项
名称类型含义
ifname字符串物理网卡接口名称,例如:“eth0”
type字符串网络类型,例如:bridge
proto字符串设置为static,表示静态配置
ipaddr字符串IP地址
netmask字符串网络掩码
dns字符串域名服务器地址,例如为8.8.8.8
mtu数字设置接口的mtu地址,例如设置为1460
当ISP(网络服务提供商)未提供任何IP网络参数时,选择通过DHCP协议来设置。
这种情况下,路由器将从ISP自动获取IP地址。DHCP配置选项如表8-11所示。
表8-11InterfaceDHCP常见配置选项
名称类型含义
ifname字符串设备接口名称,例如为“eth0”
proto字符串协议类型为DHCP

续表
名称类型含义
hostname字符串DHCP请求中的主机名,可以不用设置
vendorid字符串DHCP请求中的厂商ID,可以不用设置
ipaddrIP地址建议的IP地址,可以不用设置
更常见的是PPPoE,使用用户名和密码进行宽带拨号上网。设置选项如表8-12所示。
表8-12InterfacePPPoE常见配置选项
名称类型含义
ifname字符串PPPoE所使用物理网卡接口名称,例如eth0
proto字符串协议PPPoE,采用点对点拨号连接
username字符串PAP或CHAP认证用户名
password字符串PAP/CHAP认证密码
demand数字指定空闲时间之后将连接关闭,在以时间为单位计费的环境下经
常使用

8.4 ubox
-----------------------------------------------------------

ubox在2013年加入OpenWrt的代码库中。它是OpenWrt中的一个核心扩展功能,是
OpenWrt的帮助工具箱,现在主要有以下3部分独立功能。
(1)内核模块管理,例如加载内核模块,查看已经加载内核模块等。
(2)日志管理。
(3)UCI配置文件数据类型的验证。
内核模块管理使用kmodloader来管理,并软链接为以下5个不同的Linux命令。
(1)rmmod从Linux内核中移除一个模块。
(2)insmod向Linux内核插入一个模块。
(3)lsmod显示已加载到Linux内核中的模块状态。
8.4ubox161
(4)modinfo显示一个Linux内核模块的信息,包含模块路径、许可协议和所依赖模块。
(5)modprobe加载一个内核模块。
日志管理提供了ubus日志服务,可以通过ubus总线来获取和写入日志。logread读取
日志,logd来对日志进行管理。
对于其他软件模块来说,主要使用ubox提供的配置文件验证功能,这样带来了一些
好处,可以在软件启动之前使用脚本来对UCI配置进行验证,这样可以很好的同其他软
件模块进行分工合作。配置验证选项有很多类型和关键字,表8-13列出常用的验证关键
字含义。
表8-13验证常用关键字及其含义
关键字含义
bool布尔值,合法的取值有"0"、"off"、"false"、"no"、"disabled"、"1"、"on"、"true"、"yes"
和"enabled"
cidr无类别路由选择的缩写,包含cidr4和cidr6,是指IP地址和其掩码长度,IPv4类型通常
为255.255.255.255/32格式
cidr4IPv4类型的IP地址和其子网掩码,格式为255.255.255.255/32
file文件路径,例如为/etc/config/network
host主机名称、域名或IP地址
ip4addrIPv4地址,可以是任何IP地址,不验证IP地址合法性
list是指一个类型的几个数据列表,中间用空格分开,例如list(port)表示是一个端口列表
netmask4IPv4地址的网络掩码,例如255.255.255.0
or表示可以为几种类型的一个,例如or(port,portrange)表示为端口或者端口范围
portrange端口范围,形式为n-m,中间为短横线,不能为冒号,数字小于65535,并且n≤m
port端口号数字,合法数字范围为0~65535
range表示数字所处的范围,例如range(0,31)表示大于等于0,小于等于31
string字符串,可以限定字符串长度,例如string(1,10)限定字符串长度在1到10之间
uinteger无符号整形数字
提供的配置验证工具为validate_data,它有3种用法,第一种用法是对单个数据类型
进行验证,它通常用于在软件启动前直接验证,如果数据类型不正确,将输出错误并退出


启动流程。它需要两个参数,第一个参数为数据类型,第二个参数为需要验证的配置值。
示例8-5是cron软件包对配置参数进行验证,是否为整形数字,如果不是数字,则输出验
证失败并退出。
示例8-5:
loglevel=$(uci_get"system.@system[0].cronloglevel")
[-z"${loglevel}"]||{
/sbin/validate_datauinteger"${loglevel}"2>/dev/null
["$?"-eq0]||{
echo"validationfailed"
return1
}
}
第二种用法是对配置文件的多个数据类型进行验证。它至少需要4个参数,第一个参
数为UCI配置文件名,第二个参数为配置节类型,第三个参数配置节的名称,第四个参数
为验证的UCI选项、类型和默认值。如果有多个配置选项需要验证,则以空格分开紧跟在
第四个参数在后面。示例8-6对网络时间服务器的配置进行验证,该用法必须指定配置节
的名称,不能对匿名配置节的内容进行检查。前两行是命令输入,后面是该工具对配置文
件检查的结果。可以使用echo$？来获取其返回值,0表示成功,根据返回值是否成功再
执行下一步的处理流程。
示例8-6:
/sbin/validate_datasystemtimeserverntp\
'server:list(host)''enabled:bool:1''enable_server:bool:0'
system.ntp.server[0]=0.openwrt.pool.ntp.orgvalidatesaslist(host)
withtrue
system.ntp.server[1]=1.openwrt.pool.ntp.orgvalidatesaslist(host)
withtrue
system.ntp.server[2]=2.openwrt.pool.ntp.orgvalidatesaslist(host)
withtrue
system.ntp.server[3]=3.openwrt.pool.ntp.orgvalidatesaslist(host)
withtrue
8.5procd163
system.npt.enabled=1validatesasboolwithtrue
system.ntp.enable_server=1validatesasboolwithtrue
server='0.openwrt.pool.ntp.org'\'1.openwrt.pool.ntp.org'\
'2.openwrt.pool.ntp.org'\'3.openwrt.pool.ntp.org';enabled=1;
enable_server=1;
第3种用法的参数和第2种用法参数含义和顺序完全相同,但第3个参数为””,表示
空字符串,在这种情况下,将生成导入验证服务的命令字符串。例8-3前两行是命令调用,
其后是该命令生成的字符串。
示例8-7:
/sbin/validate_datasystemtimeserver""ntp\
'timeserver:list(host)''enabled:bool:1''enable_server:bool:0'
json_add_object;json_add_string"package""system";json_add_string
"type""timeserver";json_add_object"data";json_add_string"server"
"list(host)";json_add_string"enabled""bool";json_add_string"enable_
server""bool";json_close_object;json_close_object;
8.5procd
通常的嵌入式系统均有一个守护进程,该守护进程监控系统进程的状态,如果某些系
统进程异常退出,将再次启动这些进程。procd就是这样一个进程,它是使用C语言编写
的,一个新的OpenWrt进程管理服务。它通过init脚本来将进程信息加入到procd的数据
库中来管理进程启动,这是通过ubus总线调用来实现,可以防止进程的重复启动调用。
procd的进程管理功能主要包含3个部分。
(1)reload_config,检查配置文件是否发生变化,如果有变化则通知procd进程。
(2)procd,守护进程,接收使用者的请求,增加或删除所管理的进程,并监控进程的
状态,如果发现进程退出,则再次启动进程。
(3)procd.sh,提供函数封装procd提供系统总线方法,调用者可以非常便利的使用


procd提供的方法。

8.5.1 reload_config
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

当在命令行执行reload_config时,会对系统中的所有配置文件生成MD5值,并且和
应用程序使用的配置文件MD5值进行比较,如果不同就通过ubus总线通知procd配置文
件发生改变,如果应用程序在启动时,向procd注册了配置触发服务,那就将调用reload
函数重新读取配置文件,通常是进程退出再启动。如果配置文件没有改变将不会调用,这
将节省系统CPU资源。
注意,是配置文件的真实配置内容发生改变之后才会调用,如果增加空行和注释并不
会引起配置文件的实质内容改变。另外当系统启动时,会执行reload_config将初始配置文
件摘要值保存为/var/run/config.md5文件中。
我们以防火墙的配置文件发生改变为例来说明,当手动执行reload_config时,首先将
目录/etc/config目录下的所有文件通过“ucishow”命令输出其配置到“/var/run/config.check”
目录下,这个命令将过滤配置文件增加空行和注释的情况。
初始系统启动时的配置文件摘要值保存在文件/var/run/config.md5中,我们通过
“md5sum–c”命令来从文件中读取MD5值并验证是否和现有的配置文件MD5是否一致,
如果不一致则就调用ubus方法通知procd进程配置文件发生改变。
当procd知道配置文件发生改变后,procd就会调用/etc/ini.d/firewallreload来处理配
置文件改变,其他配置文件没有改变的进程,系统将不会花费资源进行处理。
最后将现在运行中的配置文件MD5值保存到/var/run/config.md5中。

8.5.2 procd进程
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

procd进程向ubus总线注册了service和system对象。表8-14是services对象提供的
方法,主要有3部分功能,进程的管理、文件触发器(trigger)和配置验证服务(validate)。
这些都是通过set方法增加到procd保存的内存数据库中。数据库以服务名称作为其主键。
set方法共需要5个参数,第一个参数为被管理的服务进程名称;第二个参数为启动脚本绝
对路径;第三个参数为进程实例信息,例如可执行程序路径和进程的启动参数等;第四个参
数为触发器;第五个参数为配置验证项。前3个参数是必须要传递的,后面两个参数可选。

表8-14service对象常用方法
方法含义
set进程如果存在,则修改已经注册的进程信息,如果不存在则增加,最后启动注册的进程
add增加注册的进程
list如果不带参数,则列出所有注册的进程和其信息
delete删除指定服务进程,在结束进程时调用,例如停止防火墙会进行以下调用:ubuscall
servicedelete‘{“name”:”firewall”}’
event发出事件,例如reload_config就使用该方法来通知配置发生改变
validate查看所有的验证服务
在删除时使用delete方法,只需要两个参数,第一个参数为服务名称,第二个参数为
进程实例名称,可以不指定实例名称。查询时使用list方法,该方法有两个参数,第一个
参数为服务名称,第二个参数是布尔值,表示是否输出其详细信息,默认为不输出详细信
息。该方法可以不带任何参数,表示查询所有注册的服务信息。
我们使用ubus命令来查看其方法签名:
#ubuslistservice–v
'service'@d5562053
"set":{"name":"String","script":"String","instances":"Table",
"triggers":"Array","validate":"Array"}
"add":{"name":"String","script":"String","instances":"Table",
"triggers":"Array","validate":"Array"}
"list":{"name":"String","verbose":"Boolean"}
"delete":{"name":"String","instance":"String"}
"update_start":{"name":"String"}
"update_complete":{"name":"String"}
"event":{"type":"String","data":"Table"}
"validate":{"package":"String","type":"String","service":"String"}
"get_data":{"name":"String","instance":"String","type":"String"}
我们举例来说明其参数用法。
a)增加进程,如果hello进程需要procd来管理,那么我们使用ubus命令将hello进
程加入的procd的内存数据库中。下面命令传递了4个参数,第一个参数设置被管理的服
务进程名称为“hello”。第二个参数设置启动脚本绝对路径“/etc/init.d/hello”。第三个参数


设置了进程实例信息,实例的启动命令为“/bin/hello”,启动参数为“-f-cbjbook.net”,并
设置进程意外退出的重生参数(respawn)为默认值。第四个参数为触发器,收到文件“hello”
的“config.change”消息后执行脚本“/ect/init.d/hello”并传递“reload”参数。
ubuscallserviceadd'{"name":"hello","script":"/etc/init.d/hello",\
"instances":{"instance1":{"command":["/bin/hello","-f","-c","bjbook.net"],\
"respawn":[]}},"triggers":[["config.change",["if",["eq",
"package","hello"],["run_script","/ect/init.d/hello","reload"]]]]}'
b)删除进程,参数传递进程的名字即可。
ubuscallservicedelete'{"name":"hello"}'
c)查看注册的进程信息,也可以不指定名称,将输出所有的管理列表。“verbose”为
真,表示输出其详细信息。
ubuscallservicelist'{"name":"hello","verbose":true}'
d)发送事件,第一个参数含义为事件类型,现在只支持“config.change”事件消息;
第二个参数表示文件“hello”,是指在目录“/etc/config”下的文件。在配置文件发生改变
时调用。通知procd进程配置文件hello发生了改变。
ubuscallserviceevent'{"type":"config.change","data":{"package":"hello"}}'
procd注册在系统总线上的另外一个对象为system,表8-15为system对象的所有方法。
该对象可以供luci来调用,其他模块很少调用,因此不再详述。
表8-15system对象方法
方法含义
board系统软硬件版本信息,包含4个部分,分别为内核版本、主机名称、系统CPU类
型信息和版本信息,版本信息从/etc/openwrt_release文件读出
info当前系统信息,包含5部分,分别为系统启动时间、系统当前时间、系统负载情况、
内存和交换分区占用情况等
upgrade设置service_update为1
watchdog设置watchdog信息,还存在问题,例如如果本身为0的情况
signal向指定pid的进程发信号,是通过kill函数来实现的
nandupgrade执行升级

8.5.3 procd.sh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

使用ubus方法来进行管理时其传递参数复杂并且容易出错,procd.sh将这些参数拼接
组织功能封装为函数,每一个需要被procd管理的进程都使用它提供的函数进行注册。这
些函数组织为JSON格式的消息然后通过ubus总线向procd进程发送消息。这些函数将不
同功能封装为不同的函数,构建特定的JSON消息来表达特定的功能用法,例如
procd_open_trigger函数创建一个触发器数组,在增加了所有的触发器之后,调用
procd_close_trigger函数来结束触发器数组的增加。
procd.sh提供了大量的函数方便应用程序进行注册。我们仅讲述最常用的一些函数。
procd.sh提供的API命名非常规范,除了有一个uci_validate_section函数用于验证UCI配
置文件以外,其他所有的函数均是以“procd_”开头。
(1)procd_open_instance开始增加一个服务实例。
(2)procd_set_param设置服务实例的参数值,通常会有以下几种类型的参数。
●command:服务的启动命令行。
●respawn:进程意外退出的重启机制及策略,它需要有3个设置值。第一个设置为
判断异常失败边界值(threshold),默认为3600秒,如果小于这个时间退出,则
会累加重新启动次数,如果大于这个临界值,则将重启次数置0。第二个设置为
重启延迟时间(timeout),将在多少秒后启动进程,默认为5秒。第三个设置是总
的失败重启次数(retry),是进程永久退出之前的重新启动次数,超过这个次数进
程退出之后将不会再启动。默认为5次。也可以不带任何设置,那这些设置都是
默认值。
●env:进程的环境变量。
●file:配置文件名,比较其文件内容是否改变。
●netdev:绑定的网络设备(探测ifindex更改)。
●limits:进程资源限制。
每次只能使用一种类型参数,其后是这个类型参数的值。
(3)procd_close_instance完成进程实例的增加。
通常以上3个函数在一起使用,示例8-8为rpcd对procd函数的使用,这个示例可以
用于大多数应用程序。PROG变量在前面已设置为/bin/rpcd。该示例将最终调用以下命令
完成进程的增加:
ubuscallserviceset'{"name":"rpcd","script":"/etc/init.d/rpcd",
"instances":{"instance1":{"command":["/bin/rpcd"]}}}'
示例8-8:
procd_open_instance
procd_set_paramcommand"$PROG"
procd_close_instance
(4)procd_add_reload_trigger,增加配置文件触发器,每次配置文件的修改,如果调
用了reload_config时,当前实例都被重启。有一个可选的参数为配置文件名称。其实它在
内部是调用procd_open_trigger、procd_add_config_trigger和procd_close_trigger这3个函
数来增加触发器。
(5)procd_open_validate,打开一个验证数组,是和procd_close_validate函数一起使用。
(6)procd_close_validate,关闭一个验证数组。示例8-9是软件包firewall使用procd
来对防火墙配置的触发器和验证。
示例8-9:
procd_add_reload_triggerfirewall
procd_open_validate
validate_firewall_redirect
validate_firewall_rule
procd_close_validate
(7)procd_open_service(name,[script]),至少需要一个参数,第一个参数是实例名称,
第二个参数是可选参数为启动脚本。该函数仅在在rc.common中调用,用于创建一个新的
procd进程服务消息。
(8)procd_close_service,该函数不需要参数,仅在rc.common中调用,完成进程管理
8.5procd169
服务的增加。
(9)procd_kill,杀掉服务实例(或所有的服务实例)。至少需要一个参数,第一个参
数是服务名称,通常为进程名,第二个是可选参数,是进程实例名称,因为可能有多个进
程示例,如果不指定所有的实例将被关闭。该函数在rc.common中调用,用户从命令行调
用stop函数时会使用该函数杀掉进程。
(10)uci_validate_section,调用validate_data命令注册为验证服务。在配置发生改变
后对配置文件的配置项合法性进行校验。验证服务是在进程启动时通过ubus总线注册到
procd进程中。输入以下命令,可以看到系统所有注册的验证服务。
ubuscallservicevalidate
这些验证服务是在启动脚本中增加验证服务来实现,如示例8-10所示,service_triggers
函数是预定义好的回调函数,在每一个增加服务结束后会自动调用,使用者不必关注如何
调用。validate_cron_section函数是真正的将验证服务加入procd的验证服务中。它调用
uci_validate_section函数,而uci_validate_section函数进一步调用validate_data程序。
示例8-10:
validate_cron_section(){
uci_validate_sectionsystemsystem"${1}"\
'cronloglevel:uinteger'
}
service_triggers()
{
procd_add_validationvalidate_cron_section
procd_add_reload_trigger"hello"
}
8.5.4 rc.common
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

rc.common在1209及之前的版本中并不支持procd启动,在1407版本中增加了专门
针对procd的启动。该脚本向前兼容,在软件模块的启动脚本中如果没有定义USE_PROCD
变量,则启动流程和之前完全相同,如果定义了USE_PROCD变量,对start、stop和reload


函数进行重新定义,在调用这些函数时,将调用start_service、stop_service和reload_service
函数等。
表8-16procd预定义的函数
函数含义
start_service向procd注册并启动服务,是将在services所管理对象里面增加了一项
stop_service让procd解除注册,并关闭服务,是将在services中的管理对象删除
service_triggers配置文件或网络接口改变之后触发服务重新读取配置
service_running查询服务的状态
reload_service重启服务,如果定义了该函数,在reload时将调用该函数,否则再次调用start函数
service_started用于判断进程是否启动成功
如果在自己的启动脚本中定义了USE_PROCD那就调用这些函数。在rc.common中重
新定义了start函数,相当于重载了这些函数。
8.5.5综合示例
如何编写一个procd启动脚本,如示例8-11所示,通常前面两行内容是固定的,第一
行表示使用“/etc/rc.common”来解释脚本。第二行内容设置USE_PROCD变量为1,表示使
用procd来管理进程。
示例8-11:

.. code-block:: shell
   :caption: scanf函数用法
   :linenos:

	#!/bin/sh/etc/rc.common
	USE_PROCD=1
	START=15
	STOP=85
	PROG=/bin/hello
	validate_hello_section()
	{
		uci_validate_sectionhellosystemglobe\
		'delay:uinteger(1:200)'
	}
	start_service(){
		echo"startHelloRoute!"
		validate_hello_section||{
		echo"hellovalidattionfailed!"
		return 1
	}
	procd_open_instance
	procd_set_paramcommand"$PROG"–f-wbjbook.net
	procd_set_paramrespawn
	procd_close_instance
	}
	service_triggers()
	{
		procd_add_reload_trigger"hello"
	}
	reload_service()
	{
		stop
		start
	}
PROG变量用来给程序的启动脚本赋值,用于启动应用程序。validate_hello_section函数验证了配置文件hello中的delay变量否为整形值,并且在合理的(1~200)范围内。start_service函数负责程序的启动。函数开始处调用了validate_hello_section函数对程序配置文件进行验证,如果验证失败,则进程不启动。在参数验证完成后,首先调用procd_open_instance函数发起实例增加,接着调用了procd_set_param函数来设置了启动命令和启动参数,再接着设置其进程意外退出的重启机制及策略为默认值,最后调用procd_close_instance函数完成实例的增加。注意procd管理的进程需要运行在前台,即不能调用daemon或类似函数。service_triggers函数增加触发器,我们增加了对配置文件hello的触发服务。当hello文件发生改变后,如果调用了reload_config命令,将触发调用reload_service函数。


reload_service函数在传递reload参数时进行调用,如果没有该函数,将会调用默认start函数。在执行该启动脚本时,如果需要对procd脚本进行调试,可以设置PROCD_DEBUG变量为1,这样可以输出向ubus总线调用的参数信息。例如:PROCD_DEBUG=1/etc/init.d/hellostart